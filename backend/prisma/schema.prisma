// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  EMPLOYEE
  EMPLOYER
  ADMIN
}

enum TripMethod {
  GOVERNMENT_TRANSPORTATION
  CARPOOLING
  PUBLIC_TRANSPORTATION
  RIDESHARE
  WORK_FROM_HOME
}

enum TradeStatus {
  PENDING
  COMPLETED
  REJECTED
}

enum TransportMode {
  WALKING
  BIKING
  BUS
  RAIL
  CAR
  RIDESHARE
}

// Models

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  firstName  String
  lastName   String
  role       Role
  approved    Boolean   @default(false)
  createdAt  DateTime  @default(now())
  // For employees, reference their employer if applicable
  employerId Int?
  employer   Employer? @relation(fields: [employerId], references: [id])

  credits     Float      @default(0)

  // Each employee will have many Trips registered
  trips      Trip[]
  @@index([employerId])
}

model Employer {
  id           Int       @id @default(autoincrement())
  // Company identity
  name         String    @unique
  email        String    @unique    // used for employer login
  password     String                  // you’ll need this if employers sign in
  approved     Boolean   @default(false)  // admin must flip to “true” before they can log in/use
  createdAt    DateTime  @default(now())

  credits      Float     @default(0)
  cashBalance  Float     @default(100)
  
  // Optional extra fields
  address      String?                 // company address
  phone        String?                 // contact number
  contactName  String?                 // primary contact person
  
  // Relations
  employees    User[]     // all your EMPLOYEE users belong to this employer
  tradesFrom   Trade[]    @relation("TradeFrom")
  tradesTo     Trade[]    @relation("TradeTo")
}


model Trip {
  id             Int         @id @default(autoincrement())
  user           User        @relation(fields: [userId], references: [id])
  userId         Int
  startLocation  String
  endLocation    String
  // Precise coordinates for the start of the trip
  startLatitude  Float
  startLongitude Float
  // Precise coordinates for the end of the trip; optional until the trip is completed
  endLatitude    Float?
  endLongitude   Float?
  // The distance actually traveled (for record-keeping) in meters
  distance       Float
  // The miles not driven (or saved) because of alternative transport
  milesSaved     Float
  // The transportMode used determines how many points are earned per mile
  transportMode  TransportMode  @default(CAR)
  // Date/time of the trip
  date           DateTime    @default(now())
  // Points earned for this trip (based on method and miles saved)
  credits        Float       @default(0.0)
  // Maximum speed recorded during this trip (e.g., in m/s or converted to MPH as preferred)
  maxSpeed       Float?
  // Duration of the trip in seconds
  duration       Int
  // Average speed over the trip (could be in m/s; conversion to MPH can be done when displaying)
  averageSpeed   Float?
  emmissions     Float        @default(0.0)
  @@index([userId, date])
}


model Trade {
  id               Int         @id @default(autoincrement())
  fromEmployer     Employer    @relation("TradeFrom", fields: [fromEmployerId], references: [id])
  fromEmployerId   Int
  toEmployer       Employer    @relation("TradeTo",   fields: [toEmployerId],   references: [id])
  toEmployerId     Int
  credits          Float
  pricePerCredit   Float
  totalPrice       Float       @default(0)      // optional computed = credits * pricePerCredit
  tradeDate        DateTime    @default(now())
  status           TradeStatus @default(PENDING)
  // optional:
  expiresAt        DateTime?              // if you want offers to auto‑expire
  description      String?                // free‑form notes
  @@index([fromEmployerId])
  @@index([toEmployerId])
  @@index([status])
}
