// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  EMPLOYEE
  EMPLOYER
  ADMIN
}

enum TripMethod {
  GOVERNMENT_TRANSPORTATION
  CARPOOLING
  PUBLIC_TRANSPORTATION
  RIDESHARE
  WORK_FROM_HOME
}

enum TradeStatus {
  PENDING
  COMPLETED
  REJECTED
}

// Models

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  firstName  String
  lastName   String
  role       Role
  createdAt  DateTime  @default(now())
  // For employees, reference their employer if applicable
  employerId Int?
  employer   Employer? @relation(fields: [employerId], references: [id])
  // Each employee will have many Trips registered
  trips      Trip[]
}

model Employer {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  approved  Boolean   @default(false)  // Approved by the carbon credit bank
  createdAt DateTime  @default(now())
  // One employer can have many employees
  employees User[]
  // For credit trading, an employer can be involved in trades in two roles:
  tradesFrom Trade[]   @relation("TradeFrom")
  tradesTo   Trade[]   @relation("TradeTo")
}

model Trip {
  id             Int         @id @default(autoincrement())
  user           User        @relation(fields: [userId], references: [id])
  userId         Int
  startLocation  String
  endLocation    String
  // Precise coordinates for the start of the trip
  startLatitude  Float
  startLongitude Float
  // Precise coordinates for the end of the trip; optional until the trip is completed
  endLatitude    Float?
  endLongitude   Float?
  // The distance actually traveled (for record-keeping) in meters
  distance       Float
  // The miles not driven (or saved) because of alternative transport
  milesSaved     Float
  // The method used determines how many points are earned per mile
  method         TripMethod
  // Date/time of the trip
  date           DateTime    @default(now())
  // Points earned for this trip (based on method and miles saved)
  points         Float
  // Maximum speed recorded during this trip (e.g., in m/s or converted to MPH as preferred)
  maxSpeed       Float?
  // Duration of the trip in seconds
  duration       Int
  // Average speed over the trip (could be in m/s; conversion to MPH can be done when displaying)
  averageSpeed   Float?
}


model Trade {
  id             Int         @id @default(autoincrement())
  // The employer initiating the trade (selling credits)
  fromEmployer   Employer    @relation("TradeFrom", fields: [fromEmployerId], references: [id])
  fromEmployerId Int
  // The employer receiving credits (buying)
  toEmployer     Employer    @relation("TradeTo", fields: [toEmployerId], references: [id])
  toEmployerId   Int
  // Amount of carbon credits traded
  credits        Float
  // Price per credit for the trade (or total price if you prefer)
  pricePerCredit Float
  tradeDate      DateTime    @default(now())
  status         TradeStatus @default(PENDING)
}